{"version":3,"file":"bundle.js","sources":["../index.ts"],"sourcesContent":["// 布尔\r\nlet bool: boolean = true\r\n\r\n// 数字\r\nlet num: number = 2\r\n\r\n// 字符串\r\nlet str: string = '2'\r\n\r\n// 元祖,类型一一对应\r\nlet tuple: [string, number, boolean] = ['2', 2, true]\r\ntuple.push(false)\r\ntuple.push(2)\r\ntuple.push('str')\r\n// tuple.push(null)  error 只能增加元祖中存放中存放的类型\r\n\r\n// 数组\r\nlet arr1: string[] = ['1', '2']\r\nlet arr2: number[] = [1, 2, 3]\r\nlet arr3: (string | number)[] = [2, '1', '3']\r\n\r\n// 枚举,分为3种\r\n// 1. 普通枚举\r\nenum Role {\r\n  USER,\r\n  ADMIN,\r\n  PERMISSION\r\n}\r\n/**\r\n * {\r\n    '0': 'USER',\r\n    '1': 'ADMIN',\r\n    '2': 'PERMISSION',\r\n    USER: 0,\r\n    ADMIN: 1,\r\n    PERMISSION: 2\r\n  }\r\n */\r\n// console.log(Role)\r\n// console.log(Role[0]) // 可以通过key拿到对应的常量值\r\n// console.log(Role.USER) // 也可以通过常量值拿到对应的key\r\n\r\n// 2. 异构枚举\r\nenum UserRole {\r\n  USER = 'user',\r\n  ADMIN = 200,\r\n  PERMISSION\r\n}\r\n/**\r\n * {\r\n    '200': 'ADMIN',\r\n    '201': 'PERMISSION',\r\n    USER: 'user',\r\n    ADMIN: 200,\r\n    PERMISSION: 201\r\n   }\r\n */\r\n// console.log(UserRole)\r\n\r\n// 3. 常量枚举\r\nconst enum User_Role {\r\n  USER,\r\n  ADMIN,\r\n  PERMISSION\r\n}\r\n// console.log(User_Role) error\r\nconsole.log(User_Role.USER) // 0\r\n\r\n// any\r\nlet any: any = '1'\r\nany = 2 // 不进行类型检测\r\n\r\n// null\r\nlet name1: null = null\r\nconsole.log(name1)\r\n\r\n// undefined\r\nlet str1: undefined = undefined\r\nconsole.log(str1)\r\n\r\n// void\r\nlet a: void\r\n// a = 2 error 只能赋值null/undefined,严格模式下不能将null赋值给void\r\n// a = null\r\n// a = undefined\r\n\r\n// never,不会出现的值，不能把其他类型赋值给never\r\nfunction fn(x: number | string) {\r\n  if (typeof x === 'number') {\r\n    // xx\r\n  } else if (typeof x === 'string') {\r\n    // xxx\r\n  } else {\r\n    // never\r\n    console.log(x)\r\n  }\r\n}\r\n// fn(2)\r\n\r\n// Symbol,表示独一无二\r\nlet s1: Symbol = Symbol('key')\r\nlet s2: Symbol = Symbol('key')\r\nconsole.log(s1 === s2) // false\r\n\r\n// BigInt\r\nconst n1 = Number.MAX_SAFE_INTEGER + 1\r\nconst n2 = Number.MAX_SAFE_INTEGER + 2\r\nconsole.log(n1 === n2) // true\r\nconst n3: bigint = BigInt(Number.MAX_SAFE_INTEGER)\r\nconsole.log(n3 + BigInt(1) === n3 + BigInt(2)) // false\r\n\r\n// object,表示非原始类型\r\nlet o1: object = function () { }\r\no1 = {}\r\no1 = []\r\n// o1 = 2 error"],"names":[],"mappings":";;;EAqBA;EACA;EACA,IAAK,IAIJ;EAJD,WAAK,IAAI;MACP,+BAAI,CAAA;MACJ,iCAAK,CAAA;MACL,2CAAU,CAAA;EACZ,CAAC,EAJI,IAAI,KAAJ,IAAI,QAIR;EACD;;;;;;;;;;EAUA;EACA;EACA;EAEA;EACA,IAAK,QAIJ;EAJD,WAAK,QAAQ;MACX,yBAAa,CAAA;MACb,2CAAW,CAAA;MACX,qDAAU,CAAA;EACZ,CAAC,EAJI,QAAQ,KAAR,QAAQ,QAIZ;EAkBD;EACA,OAAO,CAAC,GAAG,cAAgB,CAAA;EAM3B;EACA,IAAI,KAAK,GAAS,IAAI,CAAA;EACtB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;EAElB;EACA,IAAI,IAAI,GAAc,SAAS,CAAA;EAC/B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;EAmBjB;EAEA;EACA,IAAI,EAAE,GAAW,MAAM,CAAC,KAAK,CAAC,CAAA;EAC9B,IAAI,EAAE,GAAW,MAAM,CAAC,KAAK,CAAC,CAAA;EAC9B,OAAO,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,CAAC,CAAA;EAEtB;EACA,IAAM,EAAE,GAAG,MAAM,CAAC,gBAAgB,GAAG,CAAC,CAAA;EACtC,IAAM,EAAE,GAAG,MAAM,CAAC,gBAAgB,GAAG,CAAC,CAAA;EACtC,OAAO,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,CAAC,CAAA;EACtB,IAAM,EAAE,GAAW,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAA;EAClD,OAAO,CAAC,GAAG,CAAC,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;EAM9C;;;;;;"}